#!/bin/bash

print_help() {
echo "Usage: genapi [options] [--name <analysis name>]

        -n, --name      Chosen analysis name.
                        Default: date in yyyy-mm-dd format
        -p, --threads   Number of threads used for running the analysis.
                        Default: 1
        -a, --coverage  Alignment coverage for the shorter sequence for CD-HIT-EST.
                        Default: 0.8
        -c, --identity  Sequence identity threshold for CD-HIT-EST.
                        Default: 0.9
        -x, --geneCov1  First minimum alignment length threshold.
                        Default: 0.25
        -y, --geneCov2  Second minimum alignment length threshold.
                        Default: 0.50
        -w, --geneIden1 First minimum gene identity threshold.
                        Default: 0.98
        -z, --geneIden2 Second minimum gene identity threshold.
                        Default: 0.90
        -l, --geneLen   Minimum gene length. Shorter than the threshold genes are
                        excluded from the analysis.
                        Default: 150
	-t, --tree	Create a phylogenetic tree using gene presence-absence
			matrix. Requires RAxML to be installed.
			Default: False
	-m, --matrix	Create a gene presence-absence matrix visualization. Requires
			Rscript and pheatmap library to be installed.
			Default: False
        -v, --version   Print the tool version.
        -h, --help      Print this message.
        " >&2 ;
}

not_found(){
	echo "ERROR: $1 is not installed or not included in the path." >&2;
        exit 1

}


# optional arguments for the tool
OPTS=`getopt -o vhmtp:a:c:n:x:y:w:z:l: --long threads:,help,version,tree,matrix,coverage:,identity:,name:,geneCov1:,geneCov2:,geneIden1:,geneIden2:,geneLen: -n 'parse-options' -- "$@"`
eval set -- "$OPTS"

set -euo pipefail

if [ $? != 0 ]
then
        echo "Failed parsing options."
        print_help
        exit 1
fi


NAME=`date +%Y-%m-%d`
THREADS=1
HELP=false
VERSION=false
ALIGNMENT_COVERAGE=0.8
IDENTITY=0.9
geneCov1=0.25
geneCov2=0.50
geneIden1=98
geneIden2=90
geneLen=150
PHYL_TREE=false
VISUALIZE=false


while true; do
  case "$1" in
    -n | --name ) NAME="$2"; shift 2 ;;
    -p | --threads ) THREADS="$2"; shift 2 ;;
    -h | --help )    HELP=true; shift ;;
    -v | --version ) VERSION=true; shift ;;
    -m | --matrix ) VISUALIZE=true; shift;;
    -t | --tree ) PHYL_TREE=true; shift;;
    -a | --coverage ) ALIGNMENT_COVERAGE="$2"; shift 2 ;;
    -c | --identity ) IDENTITY="$2"; shift 2 ;;
    -x | --geneCov1 ) geneCov1="$2"; shift 2;;
    -y | --geneCov2 ) geneCov2="$2"; shift 2;;
    -w | --geneIden1 ) geneIden1="$2"; shift 2;;
    -z | --geneIden2 ) geneIden2="$2"; shift 2;;
    -l | --geneLen ) geneLen="$2"; shift 2;;
    -- ) shift; break ;;
    * ) echo "Internal error!"; exit 1 ;;
  esac
done


if $HELP
then
        print_help
	exit 2
fi

if $VERSION
then
        echo "GenAPI v1.0 (https://github.com/MigleSur/GenAPI)
Developed by: Migle Gabrielaite
Contact: migle.gabrielaite@gmail.com"
	exit 2
fi


# checking if the required programs are installed
if ! [ -x "$(command -v blastn)" ]; then
	not_found blast
fi

if ! [ -x "$(command -v cd-hit-est)" ]; then
	not_found CD-HIT
fi

if ! [ -x "$(command -v bedtools)" ]; then
	not_found bedtools
fi


# Checking if there are any GFF files present for analysis

if [ ! `ls -1 *gff 2>/dev/null | wc -l ` -gt 0 ]
then
	echo 'ERROR: GFF files are not present in the analysis directory.' >&2
	exit 1
fi






# Analysis script start


# printing all the settings to a settings file

sh settings.sh $NAME $THREADS $ALIGNMENT_COVERAGE $IDENTITY $geneCov1 $geneCov2 $geneIden1 $geneIden2 $geneLen


mkdir -p output_results/

remove_noid(){
	tsv_file=$1
	
	if grep -qv "ID" ${tsv_file}
	then
		grep -v "ID" ${tsv_file} > no_id.tsv
		echo "Warning: The following lines have no ID and will be excluded from the analysis:"
		while read line
		do
			echo $line
			sed -i ":$line:d" ${tsv_file}
		done < no_id.tsv
	fi
	rm -f no_id.tsv
}

split_gff(){
	file=$1
	file_start=`echo ${file} | sed 's/\.gff//'`
        awk '/##FASTA/,0{if (!/##FASTA/)print}' < $file > ${file_start}.fasta

	sed '/##FASTA/q' < $file | grep -v "##" > ${file_start}_temp.tsv

	# removing all the lines with no IDs
	remove_noid ${file_start}_temp.tsv

	# extracting ffn format from fasta file	
	cat ${file_start}_temp.tsv | awk -F'\t' '($3=="CDS" || $3=="gene" || $3=="tRNA" || $3=="tmRNA" || $3=="ncRNA" || $3=="rRNA") {print $1, $4, $5}' | tr " " "\t" > tmp00
	cat ${file_start}_temp.tsv | awk -F'\t' '($3=="CDS" || $3=="gene" || $3=="tRNA" || $3=="tmRNA" || $3=="ncRNA" || $3=="rRNA")' | awk -F'ID=' '{print $2}' | sed -e "s/;.*//" > tmp01

        paste tmp00 tmp01  > ${file_start}.bed

        bedtools getfasta -fi ${file_start}.fasta -bed ${file_start}.bed -fo ${file_start}.ffn -name
        rm -f tmp00 tmp01 ${file_start}.bed ${file_start}_temp.tsv
}


# extracting ffn and scaffolds.fasta files from gff files
for file in ./*.gff
do
	split_gff $file $
done

wait

# creating a file of all the genes and clustering it with cd-hit-est
ALLGENES=output_results/all_genes_${NAME}
ls *.ffn > output_results/sample_list.txt

sed -i "s/.ffn//g" output_results/sample_list.txt

cat *.ffn > ${ALLGENES}

sed -i "s/ /_/g" ${ALLGENES}

CLUSTERED=output_results/clustered_genes_${NAME}.ffn

echo -en "-----CLUSTERING WITH CD-HIT-EST-----\n"

cd-hit-est -i ${ALLGENES} -o ${CLUSTERED} -M 0 -G 0 -d 200 -T ${THREADS} -aS ${ALIGNMENT_COVERAGE} -c ${IDENTITY}

rm -f output_results/all_genes_${NAME}

# blast each sequence to the clustered database

echo -en "-----FINDING THE BEST ALIGNMENT FOR EACH GENE SEQUENCE-----\n"
bash gene_db_alignment_against_seq.sh  ${NAME} ${geneCov1} ${geneCov2} ${geneIden1} ${geneIden2} ${THREADS}

echo -en "-----CREATING GENE PRESENCE/ABSENCE MATRIX-----\n"
bash convert_gene_alignment_to_binary.sh  ${NAME} ${geneCov1} ${geneCov2} ${geneIden1} ${geneIden2} ${geneLen}

echo -en "-----THE ANALYSIS IS DONE-----\n"



# generate the phylogenetic tree based on the gene presence-absence matrix

if $PHYL_TREE
then
	if ! [ -x "$(command -v raxmlHPC)" ]; then
		not_found RAxML
	fi
	echo -en "-----GENERATING THE PHYLOGENETIC TREE-----\n"
	bash phylogenetic_analysis.sh ${NAME}
fi



# remove temporary files

bash remove_temp.sh ${NAME}



# generate the gene presence-absence matrix visualizations

if $VISUALIZE
then

	if ! [ -x "$(command -v Rscript)" ]; then
		not_found Rscript
	fi
	
	echo -en "-----PLOTTING GENE PRESENCE-ABSENCE HEATMAPS-----\n"
	# generate the gene presence-absence matrix visualization for only gained/lost genes
	heatmaps=`command -v generate_heatmaps.R`
	Rscript $heatmaps ${NAME}

fi


